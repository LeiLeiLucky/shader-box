{"id":"shader/fragmentShader.glsl","dependencies":[{"name":"/workspace/shader-box/package.json","includedInParent":true,"mtime":1694396275286}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform sampler2D uTexture;\\nvarying vec2 vUv;\\nuniform float uTime;\\nuniform float uScale;\\n\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy,\\n                         vec2(12.9898,78.233)))*\\n        43758.5453123);\\n}\\n\\nvec2 rotate(vec2 uv,float rotation , vec2 mid){\\n    return vec2(\\n       cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x , \\n       cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n    );\\n}\\n\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners percentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvec4 permute(vec4 x) {\\n  return mod(((x*34.0)+1.0)*x, 289.0);\\n}\\n\\nvec2 fade(vec2 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 P) {\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n  vec4 i = permute(permute(ix) + iy);\\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\\n  vec4 gy = abs(gx) - 0.5;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\\n  g00 *= norm.x;\\n  g01 *= norm.y;\\n  g10 *= norm.z;\\n  g11 *= norm.w;\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\\nvoid main(){\\n  // gl_FragColor = vec4(vUv,0.0,1.0);\\n  // gl_FragColor = texture2D(uTexture,vUv);\\n\\n  // float x = mod((vUv.y + uTime * 0.2) * 10.0,1.0);\\n  // x = step(0.5,x);\\n  // float strength = 0.01 / distance(vUv, vec2(0.5));\\n\\n  // float strength = floor(vUv.x * 10.0) / 10.0 * floor(vUv.y * 10.0) / 10.0;\\n  // strength = random(vec2(strength,strength));\\n  // gl_FragColor = vec4(strength,strength,strength,1.0);\\n\\n  // float strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\\n  // strength *= 0.15 / (distance(vec2(vUv.y, (vUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\\n\\n  // vec2 wavedUv = vec2(\\n  //   vUv.x + sin(vUv.y * 30.0 + uTime * 3.0) * 0.1,\\n  //   vUv.y + sin(vUv.x * 30.0 + uTime * 3.0) * 0.1\\n  // );\\n\\n  // float alpha = 1.0 - step(0.25,abs(distance(vUv,vec2(0.5,0.5)) - 0.25));\\n  // // strength *= (1.0 - step(0.5,(distance(vUv,vec2(0.5,0.5)) + 0.3)));\\n\\n  // gl_FragColor = vec4(strength,strength,strength,1.0);\\n\\n  // vec2 rotateUv = rotate(vUv,-uTime * 1.5,vec2(0.5));\\n\\n  // float strength = (atan(vUv.x - 0.5,vUv.y-0.5) + 3.14 ) / 6.28;\\n  // strength = sin(strength * 100.0);\\n\\n  float strength = step(0.8,sin(cnoise(vUv * 10.0) * uScale + uTime * 10.0) );\\n\\n  vec3 mixColor = mix(vec3(0.0,0.0,0.0),vec3(vUv,1.0),strength);\\n\\n  gl_FragColor = vec4(mixColor,1.0);\\n\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":3682},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":3680}}],"sources":{"shader/fragmentShader.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform sampler2D uTexture;\\nvarying vec2 vUv;\\nuniform float uTime;\\nuniform float uScale;\\n\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy,\\n                         vec2(12.9898,78.233)))*\\n        43758.5453123);\\n}\\n\\nvec2 rotate(vec2 uv,float rotation , vec2 mid){\\n    return vec2(\\n       cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x , \\n       cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n    );\\n}\\n\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners percentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvec4 permute(vec4 x) {\\n  return mod(((x*34.0)+1.0)*x, 289.0);\\n}\\n\\nvec2 fade(vec2 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat cnoise(vec2 P) {\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n  vec4 i = permute(permute(ix) + iy);\\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\\n  vec4 gy = abs(gx) - 0.5;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\\n  g00 *= norm.x;\\n  g01 *= norm.y;\\n  g10 *= norm.z;\\n  g11 *= norm.w;\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\\nvoid main(){\\n  // gl_FragColor = vec4(vUv,0.0,1.0);\\n  // gl_FragColor = texture2D(uTexture,vUv);\\n\\n  // float x = mod((vUv.y + uTime * 0.2) * 10.0,1.0);\\n  // x = step(0.5,x);\\n  // float strength = 0.01 / distance(vUv, vec2(0.5));\\n\\n  // float strength = floor(vUv.x * 10.0) / 10.0 * floor(vUv.y * 10.0) / 10.0;\\n  // strength = random(vec2(strength,strength));\\n  // gl_FragColor = vec4(strength,strength,strength,1.0);\\n\\n  // float strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\\n  // strength *= 0.15 / (distance(vec2(vUv.y, (vUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\\n\\n  // vec2 wavedUv = vec2(\\n  //   vUv.x + sin(vUv.y * 30.0 + uTime * 3.0) * 0.1,\\n  //   vUv.y + sin(vUv.x * 30.0 + uTime * 3.0) * 0.1\\n  // );\\n\\n  // float alpha = 1.0 - step(0.25,abs(distance(vUv,vec2(0.5,0.5)) - 0.25));\\n  // // strength *= (1.0 - step(0.5,(distance(vUv,vec2(0.5,0.5)) + 0.3)));\\n\\n  // gl_FragColor = vec4(strength,strength,strength,1.0);\\n\\n  // vec2 rotateUv = rotate(vUv,-uTime * 1.5,vec2(0.5));\\n\\n  // float strength = (atan(vUv.x - 0.5,vUv.y-0.5) + 3.14 ) / 6.28;\\n  // strength = sin(strength * 100.0);\\n\\n  float strength = step(0.8,sin(cnoise(vUv * 10.0) * uScale + uTime * 10.0) );\\n\\n  vec3 mixColor = mix(vec3(0.0,0.0,0.0),vec3(vUv,1.0),strength);\\n\\n  gl_FragColor = vec4(mixColor,1.0);\\n\\n}\";"},"lineCount":null}},"error":null,"hash":"d5dbf2debcf83dfaf0846054636bacb7","cacheData":{"env":{}}}